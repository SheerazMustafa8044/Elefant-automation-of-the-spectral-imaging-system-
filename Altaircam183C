import altaircam
import numpy as np

class App:
    def __init__(self):
        self.hcam = None
        self.buf = None
        self.total = 0

    def set_exposure_time(self, exposure_time):
        if self.hcam:
            try:
                self.hcam.put_AutoExpoEnable(False)  # to disable auto exposure
                self.hcam.put_ExpoTime(int(exposure_time))  # to set the exposure time in microseconds
                print('Exposure time set to {} '.format(exposure_time))
            except altaircam.HRESULTException as ex:
                print('Failed to set exposure time, hr=0x{:x}'.format(ex.hr))
        else:
            print('Camera is not initialized.')

    def set_raw_mode(self): #enabling the raw format of the image
        if self.hcam:
            try:
                self.hcam.put_Option(altaircam.ALTAIRCAM_OPTION_RAW, 1)  # Enable RAW format
                print('RAW format enabled')
            except altaircam.HRESULTException as ex:
                
                print('Failed to enable RAW format, hr=0x{:x}'.format(ex.hr))
        else:
            print('Camera is not initialized.')
       

# the vast majority of callbacks come from altaircam.dll/so/dylib internal threads
    @staticmethod
    def cameraCallback(nEvent, ctx):
        if nEvent == altaircam.ALTAIRCAM_EVENT_IMAGE:
            ctx.CameraCallback(nEvent)

    def CameraCallback(self, nEvent):
        if nEvent == altaircam.ALTAIRCAM_EVENT_IMAGE:
            try:
                self.hcam.PullImageV2(self.buf, 24, None)
                if self.total == 1:
                    np.save("cam_test", np.frombuffer(self.buf, dtype=np.uint8))
                self.total += 1
                print('pull image ok, total = {}'.format(self.total))
            except altaircam.HRESULTException as ex:
                print('pull image failed, hr=0x{:x}'.format(ex.hr))
        else:
            print('event callback: {}'.format(nEvent))

    def run(self):
        a = altaircam.Altaircam.EnumV2()
        if len(a) > 0:
            print('{}: flag = {:#x}, \
                  preview = {}, \
                  still = {}, \
                  x-px-size = {}, \
                  y-px-size = {}'\
                  .format(a[0].displayname, 
                          a[0].model.flag, 
                          a[0].model.preview, 
                          a[0].model.still, 
                          a[0].model.xpixsz, 
                          a[0].model.ypixsz))
            for r in a[0].model.res:
                print('\t = [{} x {}]'.format(r.width, r.height))
            self.hcam = altaircam.Altaircam.Open(a[0].id)
            if self.hcam:
                try:
                    self.hcam.put_eSize(3)
                    width, height = self.hcam.get_Size()
                    bufsize = ((width * height))
                    #bufsize = ((width * 24 + 31) // 32 * 4) * height
                    print('image size: {} x {}, bufsize = {}'.format(width, height, bufsize))
                    self.buf = bytes(bufsize)
                    # self.hcam.put_MaxAutoExpoTimeAGain(1000, 100)
                    # self.hcam.put_AutoExpoTarget(220)
                    # self.hcam.put_AutoExpoEnable(False)
                    # self.hcam.put_ExpoTime(2000000)
                    self.set_exposure_time(exposure_time=500000)
                    print(self.hcam.get_ExpTimeRange())
                    self.set_raw_mode()
                    
                    
                    

                    if self.buf:
                        try:
                            self.hcam.StartPullModeWithCallback(self.cameraCallback, self)
                        except altaircam.HRESULTException as ex:
                            print('failed to start camera, hr=0x{:x}'.format(ex.hr))
                    input('press ENTER to exit')
                finally:
                    self.hcam.Close()
                    self.hcam = None
                    self.buf = None
            else:
                print('failed to open camera')
        else:
            print('no camera found')

if __name__ == '__main__':
    app = App()
    app.run()
